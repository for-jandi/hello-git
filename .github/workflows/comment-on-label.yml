name: PR Comment for Order Label

on:
  pull_request:
    types: [labeled, unlabeled]

jobs:
  comment-on-label:
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const labelName = context.payload.label?.name?.toLowerCase();

            const defaultCommentId = 'order-pr-label-bot';
            const methodLabels = ['post', 'get', 'put', 'delete'];

            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const findCommentById = (id) =>
              comments.data.find(c => c.body.includes(`<!-- ${id} -->`));

            if (context.payload.action === 'labeled') {
              if (labelName === 'order') {
                const existing = findCommentById(defaultCommentId);
                if (!existing) {
                  const body = `<!-- ${defaultCommentId} -->
                  🔔 이 PR은 \`order\` 라벨이 지정되어 자동 안내를 수행합니다.
                  
                  ✅ 아래 HTTP 메서드 라벨 중 해당되는 것을 추가해주세요:
                  
                  \`post\`, \`get\`, \`put\`, \`delete\`
                  
                  라벨을 제거하면 해당 안내도 삭제됩니다.`;
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: prNumber,
                    body,
                  });
                }
              }

              if (methodLabels.includes(labelName)) {
                const id = `order-method-${labelName}`;
                const existing = findCommentById(id);
                if (!existing) {
                  const body = `<!-- ${id} -->
                  📦 \`${labelName.toUpperCase()}\` 메서드에 대한 처리를 확인해주세요.
                  
                  - API 명세, 예외 처리, 응답 포맷 등을 점검했나요?
                  - 적절한 인증/권한 체크가 포함되어 있나요?
                  `;
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: prNumber,
                    body,
                  });
                }
              }
            }

            if (context.payload.action === 'unlabeled') {
              if (methodLabels.includes(labelName)) {
                const id = `order-method-${labelName}`;
                const existing = findCommentById(id);
                if (existing) {
                  await github.rest.issues.deleteComment({
                    owner,
                    repo,
                    comment_id: existing.id,
                  });
                }
              }
            }
